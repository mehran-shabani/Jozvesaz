# Nginx reverse proxy for the Jozvesaz stack.
#
# This configuration forwards API requests to the FastAPI backend service and routes all
# other traffic to the Next.js frontend. It also terminates TLS using certificates issued
# by Let's Encrypt (or another CA) and enables automatic HTTP->HTTPS redirects.

map $http_upgrade $connection_upgrade {
    default upgrade;
    ''      close;
}

upstream fastapi_backend {
    server backend:4000;
    keepalive 32;
}

upstream nextjs_frontend {
    server frontend:3000;
    keepalive 32;
}

# HTTP listener that only exists to answer ACME challenges and redirect the rest of the
# traffic to HTTPS.
server {
    listen 80;
    listen [::]:80;
    server_name example.com www.example.com;

    # ACME HTTP-01 challenge responses from Certbot (or another client) will be written
    # to this directory. Ensure that the "certbot" volume is mounted into the container
    # or that this directory exists on the host.
    location /.well-known/acme-challenge/ {
        root /var/www/certbot;
        default_type "text/plain";
    }

    location / {
        return 301 https://$host$request_uri;
    }
}

# HTTPS listener that terminates TLS and proxies requests to the backend services.
server {
    listen 443 ssl http2;
    listen [::]:443 ssl http2;
    server_name example.com www.example.com;

    # Replace these certificate paths with the ones created by Certbot or your
    # certificate authority of choice.
    ssl_certificate     /etc/letsencrypt/live/example.com/fullchain.pem;
    ssl_certificate_key /etc/letsencrypt/live/example.com/privkey.pem;
    include /etc/letsencrypt/options-ssl-nginx.conf;
    ssl_dhparam /etc/letsencrypt/ssl-dhparams.pem;

    ssl_session_timeout 1d;
    ssl_session_cache shared:SSL:10m;
    ssl_session_tickets off;

    # Harden TLS settings. Adjust the ciphersuite if you need to support older clients.
    ssl_protocols TLSv1.2 TLSv1.3;
    ssl_ciphers 'ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256';

    add_header Strict-Transport-Security "max-age=63072000; includeSubDomains; preload" always;
    add_header X-Content-Type-Options nosniff;
    add_header X-Frame-Options SAMEORIGIN;
    add_header X-XSS-Protection "1; mode=block";

    client_max_body_size 25m;

    # Ensure the proxy keeps the original request metadata.
    proxy_set_header Host $host;
    proxy_set_header X-Real-IP $remote_addr;
    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
    proxy_set_header X-Forwarded-Proto $scheme;
    proxy_set_header X-Forwarded-Host $host;
    proxy_set_header X-Forwarded-Port $server_port;

    # Keep WebSocket connections working for both FastAPI and Next.js.
    proxy_set_header Upgrade $http_upgrade;
    proxy_set_header Connection $connection_upgrade;

    proxy_http_version 1.1;
    proxy_cache_bypass $http_upgrade;
    proxy_buffering off;

    # Health-check endpoint exposed by FastAPI (adjust if the backend exposes a different path).
    location = /api/health {
        proxy_pass http://fastapi_backend;
        proxy_read_timeout 60s;
    }

    location /api/ {
        proxy_pass http://fastapi_backend/;
        proxy_read_timeout 60s;
    }

    # Serve Next.js assets and pages.
    location /_next/ {
        proxy_pass http://nextjs_frontend/;
        proxy_read_timeout 60s;
    }

    location / {
        proxy_pass http://nextjs_frontend/;
        proxy_read_timeout 60s;
    }
}
