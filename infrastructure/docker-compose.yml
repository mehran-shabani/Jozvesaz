version: "3.9"

services:
  frontend:
    build:
      context: ../frontend
    env_file:
      - ../.env
      - ../frontend/.env.local
    depends_on:
      backend:
        condition: service_started
    ports:
      - "3000:3000"
    volumes:
      - storage:/storage
    restart: unless-stopped

  backend:
    build:
      context: ../backend
    env_file:
      - ../.env
      - ../backend/.env
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    ports:
      - "4000:4000"
    volumes:
      - storage:/storage
    restart: unless-stopped

  worker:
    build:
      context: ../worker
    env_file:
      - ../.env
      - ../worker/.env
    depends_on:
      backend:
        condition: service_started
      redis:
        condition: service_healthy
    volumes:
      - storage:/storage
    restart: unless-stopped

  prometheus:
    image: prom/prometheus:v2.48.1
    command:
      - --config.file=/etc/prometheus/prometheus.yml
      - --storage.tsdb.path=/prometheus
      - --web.enable-lifecycle
    volumes:
      - ./prometheus/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - ./prometheus/alert.rules.yml:/etc/prometheus/alert.rules.yml:ro
      - prometheus_data:/prometheus
    ports:
      - "9090:9090"
    depends_on:
      node-exporter:
        condition: service_started
      cadvisor:
        condition: service_started
    restart: unless-stopped

  node-exporter:
    image: prom/node-exporter:v1.7.0
    command:
      - --path.procfs
      - /host/proc
      - --path.rootfs
      - /host/root
      - --path.sysfs
      - /host/sys
      - --collector.filesystem.ignored-mount-points
      - ^/(sys|proc|dev|host|etc|var/lib/docker/.+)($$|/)
      - --collector.filesystem.ignored-fs-types
      - ^(sysfs|procfs|autofs|cgroup|cgroup2|tmpfs|devtmpfs|overlay|squashfs|nsfs|fuse.lxcfs|fuse.portal)
    ports:
      - "9100:9100"
    volumes:
      - /proc:/host/proc:ro
      - /:/host/root:ro
      - /sys:/host/sys:ro
    restart: unless-stopped

  cadvisor:
    image: gcr.io/cadvisor/cadvisor:v0.47.2
    privileged: true
    ports:
      - "8080:8080"
    volumes:
      - /:/rootfs:ro
      - /var/run:/var/run:rw
      - /sys:/sys:ro
      - /var/lib/docker/:/var/lib/docker:ro
    restart: unless-stopped

  grafana:
    image: grafana/grafana:10.4.2
    environment:
      GF_SECURITY_ADMIN_USER: ${GRAFANA_ADMIN_USER:-admin}
      GF_SECURITY_ADMIN_PASSWORD: ${GRAFANA_ADMIN_PASSWORD:-admin}
      GF_USERS_ALLOW_SIGN_UP: "false"
    depends_on:
      prometheus:
        condition: service_started
      loki:
        condition: service_started
    ports:
      - "3001:3000"
    volumes:
      - grafana_data:/var/lib/grafana
      - ./grafana/provisioning/datasources:/etc/grafana/provisioning/datasources:ro
      - ./grafana/provisioning/dashboards:/etc/grafana/provisioning/dashboards:ro
      - ./grafana/dashboards:/var/lib/grafana/dashboards:ro
    restart: unless-stopped

  loki:
    image: grafana/loki:2.9.2
    command:
      - -config.file=/etc/loki/loki-config.yml
    ports:
      - "3100:3100"
    volumes:
      - ./loki/loki-config.yml:/etc/loki/loki-config.yml:ro
      - loki_data:/loki
    restart: unless-stopped

  promtail:
    image: grafana/promtail:2.9.2
    command:
      - -config.file=/etc/promtail/promtail-config.yml
    volumes:
      - ./loki/promtail-config.yml:/etc/promtail/promtail-config.yml:ro
      - /var/log:/var/log:ro
      - /var/lib/docker/containers:/var/lib/docker/containers:ro
      - /var/run/docker.sock:/var/run/docker.sock
    depends_on:
      loki:
        condition: service_started
    restart: unless-stopped

  dcgm-exporter:
    image: nvidia/dcgm-exporter:3.1.8-2.5.0-rc.1
    profiles:
      - gpu
    runtime: nvidia
    environment:
      - NVIDIA_VISIBLE_DEVICES=all
    ports:
      - "9400:9400"
    restart: unless-stopped

  redis:
    image: redis:7-alpine
    env_file:
      - ./redis/.env
    command:
      - sh
      - -c
      - exec redis-server --port "$REDIS_PORT" --save 60 1 --loglevel warning
    ports:
      - "6379:6379"
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 3s
      retries: 5
    restart: unless-stopped

  postgres:
    image: postgres:15-alpine
    env_file:
      - ./postgres/.env
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U $$POSTGRES_USER -d $$POSTGRES_DB"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped

volumes:
  postgres_data:
  storage:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ${STORAGE_VOLUME_PATH:-/storage}
  prometheus_data:
  grafana_data:
  loki_data:
