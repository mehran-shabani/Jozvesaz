version: "3.9"

services:
  frontend:
    build:
      context: ../frontend
    env_file:
      - ../.env
      - ../frontend/.env.local
    depends_on:
      backend:
        condition: service_started
    ports:
      - "3000:3000"
    volumes:
      - storage:/storage
    restart: unless-stopped

  backend:
    build:
      context: ../backend
    env_file:
      - ../.env
      - ../backend/.env
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    ports:
      - "4000:4000"
    volumes:
      - storage:/storage
    restart: unless-stopped

  worker:
    build:
      context: ../worker
    env_file:
      - ../.env
      - ../worker/.env
    depends_on:
      backend:
        condition: service_started
      redis:
        condition: service_healthy
    volumes:
      - storage:/storage
    restart: unless-stopped

  redis:
    image: redis:7-alpine
    env_file:
      - ./redis/.env
    command:
      - sh
      - -c
      - exec redis-server --port "$REDIS_PORT" --save 60 1 --loglevel warning
    ports:
      - "6379:6379"
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 3s
      retries: 5
    restart: unless-stopped

  postgres:
    image: postgres:15-alpine
    env_file:
      - ./postgres/.env
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U $$POSTGRES_USER -d $$POSTGRES_DB"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped

volumes:
  postgres_data:
  storage:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ${STORAGE_VOLUME_PATH:-/storage}
